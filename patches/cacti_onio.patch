diff --git a/io.cc b/io.cc
index 3a798aa..b6ae473 100644
--- a/io.cc
+++ b/io.cc
@@ -1993,11 +1993,11 @@ bool InputParameter::error_checking()
     cerr << "Feature size must be > 0" << endl;
     return false;
   }
-  else if (F_sz_um > 0.091)
-  {
-    cerr << "Feature size must be <= 90 nm" << endl;
-    return false;
-  }
+  //else if (F_sz_um > 0.091)
+  //{
+  //  cerr << "Feature size must be <= 90 nm" << endl;
+  //  return false;
+  //}
 
 
   uint32_t RWP  = num_rw_ports;
@@ -2566,7 +2566,7 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
       file << "Dynamic write energy (nJ), ";
 //      file << "Tag Dynamic read energy (nJ), ";
 //      file << "Data Dynamic read energy (nJ), ";
-//      file << "Dynamic read power (mW), ";
+      file << "Dynamic read power (mW), ";
       file << "Standby leakage per bank(mW), ";
 //      file << "Leakage per bank with leak power management (mW), ";
 //      file << "Leakage per bank with leak power management (mW), ";
@@ -2587,10 +2587,10 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
       file << "Ntsam_level_2, ";
       file << "Tag arrary area efficiency %, ";
 
-//      file << "Resistance per unit micron (ohm-micron), ";
-//      file << "Capacitance per unit micron (fF per micron), ";
-//      file << "Unit-length wire delay (ps), ";
-//      file << "FO4 delay (ps), ";
+      file << "Resistance per unit micron (ohm-micron), ";
+      file << "Capacitance per unit micron (fF per micron), ";
+      file << "Unit-length wire delay (ps), ";
+      file << "FO4 delay (ps), ";
 //      file << "delay route to bank (including crossb delay) (ps), ";
 //      file << "Crossbar delay (ps), ";
 //      file << "Dyn read energy per access from closed page (nJ), ";
@@ -2613,7 +2613,8 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
 //      file << "Area opt (perc), ";
 //      file << "Delay opt (perc), ";
 //      file << "Repeater opt (perc), ";
-//      file << "Aspect ratio";
+      file << "Aspect ratio, ";
+      file << "Min Driver Input Cap (pF), ";
       file << endl;
     }
     file << g_ip->F_sz_nm << ", ";
@@ -2657,7 +2658,7 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
 //        {
 //        		file << "NA" << ", ";
 //        }
-//    file << fin_res.data_array2->power.readOp.dynamic*1e+9 << ", ";
+    file << fin_res.data_array2->power.readOp.dynamic*1e+9 << ", ";
 //    if (g_ip->fully_assoc || g_ip->pure_cam)
 //        {
 //    	    file << fin_res.power.searchOp.dynamic*1000/fin_res.cycle_time << ", ";
@@ -2700,10 +2701,10 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
     	file << "N/A" << ", ";
     }
 
-//    file << g_tp.wire_inside_mat.R_per_um << ", ";
-//    file << g_tp.wire_inside_mat.C_per_um / 1e-15 << ", ";
-//    file << g_tp.unit_len_wire_del / 1e-12 << ", ";
-//    file << g_tp.FO4 / 1e-12 << ", ";
+    file << g_tp.wire_inside_mat.R_per_um << ", ";
+    file << g_tp.wire_inside_mat.C_per_um / 1e-15 << ", ";
+    file << g_tp.unit_len_wire_del / 1e-12 << ", ";
+    file << g_tp.FO4 / 1e-12 << ", ";
 //    file << fin_res.data_array.delay_route_to_bank / 1e-9 << ", ";
 //    file << fin_res.data_array.delay_crossbar / 1e-9 << ", ";
 //    file << fin_res.data_array.dyn_read_energy_from_closed_page / 1e-9 << ", ";
@@ -2720,7 +2721,15 @@ void output_data_csv(const uca_org_t & fin_res, string fn)
 //    file << fin_res.data_array.trcd * 1e9 << ", " ;
 //    file << fin_res.data_array.cas_latency * 1e9 << ", " ;
 //    file << fin_res.data_array.precharge_delay * 1e9 << ", " ;
-//    file << fin_res.data_array.all_banks_height / fin_res.data_array.all_banks_width;
+    file << fin_res.data_array.all_banks_height / fin_res.data_array.all_banks_width << ", " ;
+
+    //double min_w_pmos = 1.0;
+    DeviceType *dt = new DeviceType;
+    double min_w_pmos = dt->n_to_p_eff_curr_drv_ratio*g_tp.min_w_nmos_;
+    double input_cap = gate_C(g_tp.min_w_nmos_ + min_w_pmos, 0);
+    delete dt;
+    file << input_cap*1e12 << ", " ;
+
     file<<endl;
   }
   file.close();
